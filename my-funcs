# vim:set ft=sh:

# Print a message to stderr and exit current process
function die {
    echo "$@" 1>&2
    exit 1
}

# Get file size
function get-filesize {
    LANG=C ls -l $1 | awk '{print $5}'
}

# Get SHA1 hash (no file name print)
function get-sha1 {
    sha1sum $1 | cut -d\  -f1
}

# Check if two files are differ by file size and hash
function is-different {
    if [ $(get-filesize $1) -ne $(get-filesize $2) ]; then
        # echo "file size differ" 1>&2
        true
    elif [ $(get-sha1 $1) != $(get-sha1 $2) ]; then
        true
        # echo "sha1 differ" 1>&2
    else
        false
    fi
}

# Back up a file (copy and rename)
function backup-file {
    if [ $# -lt 1 ]; then
        echo specify a filename.
        return 1
    fi
    if [ ! -e $1 ]; then
        echo "'$1' does not exist."
        return 2
    fi
    latest=$(find `dirname $1` -regextype posix-egrep -regex '.*[0-9]{6}-[0-9]{6}$' | sort | tail -1)
    if [ -z "$latest" ] || is-different $1 $latest; then
        dest=$1.$(date '+%y%m%d-%H%M%S')
        cp -a $1 $dest
        echo "the file has been backed up to $dest."
    else
        echo "the file has already backed up. skipping."
    fi
}

# Inject code into a file.
# To avoid duplication, do nothing if signiture already exists in the file
#
# Usage:
#   add-code <filename> <signture>
function add-code {
    if [ $# -lt 2 ]; then
        echo 'required 2 arguments'
        return 1
    fi
    file=$1
    signature=$2
    if grep "$signature" "$file" >/dev/null 2>&1; then
        # already installed
        echo "Already installed in '$file'. Skipping."
    else
        # inject code to a file
        echo "$signature" >> $file
        cat >> $file
        echo "A script has been injected to '$file'."
    fi
}

# Print arguments one per line with indexing (for debug use)
function show-args {
    NUM=1
    echo '$0 = '\'$0\'
    while [ $# -ne 0 ]; do
        echo "\$${NUM} = "\'$1\'
        shift
        NUM=$((NUM + 1))
    done
}

# Convert a file into pastable bash command.
#
# Usage:
#   f2txt <filename>
function f2txt {
    if [ ! -r "$1" ]; then echo "f2txt: Can not read file: $1"; return 1; fi
    if [ -d "$1" ]; then echo "f2txt: Is directory: $1"; return 2; fi
    echo "cat <<EOS | base64 -d | gzip -d -c > $(basename $1)"
    gzip -c $1 | base64 -w$COLUMNS
    echo "EOS"
}
